// lib/features/basket/presentation/defect_menu_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../domain/basket_row.dart';
import '../presentation/basket_notifier.dart';
import 'widgets/defect_tile.dart';
import 'widgets/counter_stepper.dart';
import 'basket_drawer.dart';
import '../../../providers.dart';
import 'size_select_screen.dart';

class DefectMenuScreen extends ConsumerStatefulWidget {
  const DefectMenuScreen({super.key});
  @override
  ConsumerState<DefectMenuScreen> createState() => _State();
}

class _State extends ConsumerState<DefectMenuScreen> {
  static const _defects = [
    '–±—Ä–∞–∫ –≤–µ—Ä—Ö', '–±—Ä–∞–∫ –Ω–∏–∑', '–±—Ä–∞–∫ –∫–æ–º–ø–ª–µ–∫—Ç',
    '—Ä–∞–∑–º–µ—Ä –≤–µ—Ä—Ö', '—Ä–∞–∑–º–µ—Ä –Ω–∏–∑', '—Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–ª–µ–∫—Ç',
    '—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç', '–¥—Ä—É–≥–æ–µ', '–û–ö',
  ];

  String? _selected;      // –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
  String? _pickedSize;    // –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è ¬´—Ä–∞–∑–º–µ—Ä ‚Ä¶¬ª)
  int _qty = 1;

  @override
  Widget build(BuildContext context) {
    final state    = ref.watch(basketNotifierProvider);
    final basket   = state.basket;
    final notifier = ref.read(basketNotifierProvider.notifier);
    final readOnly = state.readOnly;

    // ‚É£  –ö–æ—Ä–∑–∏–Ω—ã –µ—â—ë –Ω–µ—Ç ‚îÄ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π stub
    if (basket == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')),
        body: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
                style: Theme.of(context).textTheme.titleLarge,
              ),
              const SizedBox(height: 24),
              // –ö–Ω–æ–ø–∫–∞ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
              ElevatedButton.icon(
                icon : const Icon(Icons.qr_code_scanner_outlined),
                label: const Text('–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 28, vertical: 14),
                ),
                onPressed: () => context.go('/scan'),
              ),
              const SizedBox(height: 12),
              // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ò—Å—Ç–æ—Ä–∏—è
              OutlinedButton.icon(
                icon : const Icon(Icons.history),
                label: const Text('–ò—Å—Ç–æ—Ä–∏—è'),
                style: OutlinedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 28, vertical: 14),
                ),
                onPressed: () => context.go('/history'),
              ),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      drawer: const BasketDrawer(),
      appBar: AppBar(
        title: Text(basket.productName, maxLines: 3),
        leading: Builder(
          builder: (c) => IconButton(
            icon: const Icon(Icons.menu),
            onPressed: () => Scaffold.of(c).openDrawer(),
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.qr_code_scanner_outlined),
            onPressed: readOnly
                ? null
                : () {
                    if (basket == null || basket.rows.isEmpty) {
                      context.go('/scan');
                    } else {
                      _showBasketConflict(context, notifier);
                    }
                  },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–µ—Ç–∫–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤
            Expanded(
              child: GridView.builder(
                physics     : const BouncingScrollPhysics(),
                itemCount   : _defects.length,
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount : 3,
                  mainAxisSpacing: 12,
                  crossAxisSpacing: 12,
                ),
                itemBuilder: (_, i) {
                  final d = _defects[i];
                  return DefectTile(
                    title   : d,
                    selected: _selected == d,
                    onTap   : readOnly
                        ? null
                        : () async {
                            setState(() {
                              _selected   = d;
                              _pickedSize = null; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–ª—ã–π –≤—ã–±–æ—Ä
                              _qty        = 1;
                            });

                            // –µ—Å–ª–∏ ¬´—Ä–∞–∑–º–µ—Ä ‚Ä¶¬ª ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–∞–∑–º–µ—Ä–æ–≤
                            if (d.startsWith('—Ä–∞–∑–º–µ—Ä')) {
                              final scannedSize = basket.productName.split(' ').last;
                              final sz = await Navigator.push<String>(
                                context,
                                MaterialPageRoute(
                                  builder: (_) => SizeSelectScreen(
                                    current      : scannedSize,
                                    disabledSize : scannedSize, // ‚Üê –±–ª–æ–∫–∏—Ä—É–µ–º ¬´—Ä–æ–¥–Ω–æ–π¬ª —Ä–∞–∑–º–µ—Ä
                                  ),
                                ),
                              );
                              if (sz != null) {
                                setState(() => _pickedSize = sz);
                              } else {
                                setState(() => _selected = null);
                              }
                            }
                          },
                  );
                },
              ),
            ),
            const SizedBox(height: 16),

            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å—á—ë—Ç—á–∏–∫
            CounterStepper(
              value    : _qty,
              disabled : readOnly,
              onChanged: (v) => setState(() => _qty = v),
            ),
            const SizedBox(height: 20),

            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: (readOnly || _selected == null)
                    ? null
                    : () async {
                        // ¬´–¥—Ä—É–≥–æ–µ¬ª ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        String? comment = '';
                        if (_selected == '–¥—Ä—É–≥–æ–µ') {
                          comment = await _askComment(context);   // null ‚áî –ù–∞–∂–∞–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª
                          if (comment == null) return;           // üö´ –≤—ã—Ö–æ–¥–∏–º –ë–ï–ó –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                        }

                        final row = BasketRow(
                          productCode : basket.productCode,
                          productName : basket.productName,
                          factory     : basket.factory,
                          date        : basket.date,
                          defect      : _selected!,
                          size        : _pickedSize ?? basket.productName.split(' ').last,
                          qty         : _qty,
                          comment     : comment,
                        );
                        notifier.addRow(row);

                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content : Text('${row.defect}${row.defect.startsWith('—Ä–∞–∑–º–µ—Ä') ? ', ${row.size}' : ''} √ó $_qty –¥–æ–±–∞–≤–ª–µ–Ω–æ'),
                            duration: const Duration(milliseconds: 600),
                          ),
                        );
                        setState(() { _selected = null; _pickedSize = null; _qty = 1; });
                      },
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 18),
                  child: Text(
                    _selected == null
                        ? '–í–´–ë–ï–†–ò–¢–ï –î–ï–§–ï–ö–¢'
                        : _selected!.startsWith('—Ä–∞–∑–º–µ—Ä') && _pickedSize != null
                            ? '–î–û–ë–ê–í–ò–¢–¨ ¬´$_selected, $_pickedSize¬ª √ó $_qty'
                            : '–î–û–ë–ê–í–ò–¢–¨ ¬´$_selected¬ª √ó $_qty',
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<String?> _askComment(BuildContext ctx) async {
    final ctrl = TextEditingController();
    return showDialog<String>(
      context: ctx,
      builder: (_) => AlertDialog(
        title  : const Text('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'),
        content: TextField(controller: ctrl, maxLines: 2, autofocus: true),
        actions: [
          TextButton  (onPressed: () => Navigator.pop(ctx), child: const Text('–û—Ç–º–µ–Ω–∞')),
          ElevatedButton(onPressed: () => Navigator.pop(ctx, ctrl.text.trim()), child: const Text('OK')),
        ],
      ),
    );
  }

  Future<void> _showBasketConflict(BuildContext context, BasketNotifier notifier) async {
    await showDialog(
      context: context,
      barrierDismissible: true,
      builder: (_) => AlertDialog(
        title: const Text('–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞'),
        content: const Text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}
